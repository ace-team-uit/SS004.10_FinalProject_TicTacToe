/**
 * Audio Manager Module
 * Qu·∫£n l√Ω √¢m thanh v√† BGM cho game Tic Tac Toe
 *
 * Module n√†y x·ª≠ l√Ω:
 * - Load v√† preload c√°c file √¢m thanh
 * - Ph√°t sound effects v√† BGM
 * - X·ª≠ l√Ω fade in/out cho BGM
 * - ƒêi·ªÅu khi·ªÉn volume v√† mute
 * - T·ª± ƒë·ªông thay ƒë·ªïi BGM theo m√†n h√¨nh
 * - X·ª≠ l√Ω autoplay policy c·ªßa browser
 *
 * @author ACE Team
 * @version 1.1.0
 *
 * @example
 * // Initialize audio system
 * await window.initAudio();
 *
 * // Play a sound effect
 * window.playSound("click");
 *
 * // Play background music
 * window.playBgm("bgm-game");
 *
 * // Get audio manager instance
 * const manager = window.audioManager;
 *
 * // Control volume
 * manager.setVolume(0.8);
 * manager.setBgmVolume(0.5);
 *
 * // Toggle mute
 * manager.toggleMute();
 */

class AudioManager {
  constructor() {
    this.audioContext = null;
    this.sounds = new Map();
    this.bgm = new Map();
    this.currentBgm = null;
    this.isMuted = false;
    this.volume = 1.0;
    this.bgmVolume = 0.7;
    this.autoplayAlertShown = false;

    // √Ånh x·∫° √¢m thanh
    this.soundMap = {
      click: "assets/sounds/click.mp3",
      win: "assets/sounds/win.mp3",
      lose: "assets/sounds/lose.mp3",
      draw: "assets/sounds/draw.mp3",
    };

    // √Ånh x·∫° BGM
    this.bgmMap = {
      "bgm-home": "assets/sounds/bgm/Elevator.mp3",
      "bgm-game": "assets/sounds/bgm/Run-Amok.mp3",
      "bgm-select": "assets/sounds/bgm/Fluffing-a-Duck.mp3",
      "bgm-intro": "assets/sounds/bgm/Elevator.mp3",
      "bgm-settings": "assets/sounds/bgm/Elevator.mp3",
      "bgm-result": "assets/sounds/bgm/Elevator.mp3",
    };
  }

  /**
   * Kh·ªüi t·∫°o audio context v√† preload c√°c sound assets
   */
  async initAudio() {
    try {
      // T·∫°o audio context n·∫øu browser h·ªó tr·ª£
      if (
        typeof AudioContext !== "undefined" ||
        typeof window["webkitAudioContext"] !== "undefined"
      ) {
        this.audioContext = new (AudioContext || window["webkitAudioContext"])();
      }

      // T·∫£i tr∆∞·ªõc t·∫•t c·∫£ √¢m thanh
      await this.preloadSounds();

      // T·∫£i tr∆∞·ªõc t·∫•t c·∫£ BGM
      await this.preloadBGM();

      // Ki·ªÉm tra ch√≠nh s√°ch t·ª± ƒë·ªông ph√°t v√† hi·ªÉn th·ªã c·∫£nh b√°o n·∫øu c·∫ßn
      await this.checkAutoplayPolicy();

      console.log("üéµ Audio system initialized successfully");
      return true;
    } catch (error) {
      console.warn("‚ö†Ô∏è Audio initialization failed:", error);
      return false;
    }
  }

  /**
   * Preload t·∫•t c·∫£ sound effects
   */
  async preloadSounds() {
    const promises = Object.entries(this.soundMap).map(([name, path]) =>
      this.loadSound(name, path)
    );

    try {
      await Promise.all(promises);
      console.log("üîä All sound effects preloaded");
    } catch (error) {
      console.warn("‚ö†Ô∏è Some sound effects failed to load:", error);
    }
  }

  /**
   * Preload t·∫•t c·∫£ BGM
   */
  async preloadBGM() {
    const promises = Object.entries(this.bgmMap).map(([name, path]) => this.loadBGM(name, path));

    try {
      await Promise.all(promises);
      console.log("üé∂ All BGM preloaded");
    } catch (error) {
      console.warn("‚ö†Ô∏è Some BGM failed to load:", error);
    }
  }

  /**
   * Load m·ªôt sound effect v√† l∆∞u v√†o cache
   * @param {string} name - T√™n c·ªßa sound effect
   * @param {string} path - ƒê∆∞·ªùng d·∫´n ƒë·∫øn file √¢m thanh
   * @returns {Promise<HTMLAudioElement|null>} Audio element ho·∫∑c null n·∫øu load th·∫•t b·∫°i
   * @throws {Error} N·∫øu path kh√¥ng h·ª£p l·ªá ho·∫∑c file kh√¥ng t·ªìn t·∫°i
   */
  async loadSound(name, path) {
    try {
      const audio = new Audio();
      audio.preload = "auto";

      // X·ª≠ l√Ω l·ªói 404
      audio.onerror = () => {
        console.warn(`‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫£i √¢m thanh: ${path}`);
        this.sounds.set(name, null);
      };

      audio.src = path;
      await audio.load();

      this.sounds.set(name, audio);
      return audio;
    } catch (error) {
      console.warn(`‚ö†Ô∏è Error loading sound ${name}:`, error);
      this.sounds.set(name, null);
      return null;
    }
  }

  /**
   * Load m·ªôt BGM v√† l∆∞u v√†o cache
   * @param {string} name - T√™n c·ªßa BGM track
   * @param {string} path - ƒê∆∞·ªùng d·∫´n ƒë·∫øn file √¢m thanh
   * @returns {Promise<HTMLAudioElement|null>} Audio element ho·∫∑c null n·∫øu load th·∫•t b·∫°i
   * @throws {Error} N·∫øu path kh√¥ng h·ª£p l·ªá ho·∫∑c file kh√¥ng t·ªìn t·∫°i
   */
  async loadBGM(name, path) {
    try {
      const audio = new Audio();
      audio.preload = "auto";
      audio.loop = true;

      // X·ª≠ l√Ω l·ªói 404
      audio.onerror = () => {
        console.warn(`‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫£i BGM: ${path}`);
        this.bgm.set(name, null);
      };

      audio.src = path;
      await audio.load();

      this.bgm.set(name, audio);
      return audio;
    } catch (error) {
      console.warn(`‚ö†Ô∏è Error loading BGM ${name}:`, error);
      this.bgm.set(name, null);
      return null;
    }
  }

  /**
   * Ki·ªÉm tra autoplay policy v√† hi·ªÉn th·ªã alert n·∫øu c·∫ßn
   */
  async checkAutoplayPolicy() {
    try {
      // Ki·ªÉm tra xem ƒë√£ hi·ªÉn th·ªã alert ch∆∞a
      const settings = window["AppStorage"]?.loadSettings();
      if (settings?.gameAudioAlertShown) {
        console.log("‚úÖ Audio alert already shown, skipping");
        return;
      }

      // Ki·ªÉm tra t·ª± ƒë·ªông ph√°t v·ªõi m·ªôt √¢m thanh ng·∫Øn
      const testSound = this.sounds.get("click");
      if (testSound) {
        // T·∫°m th·ªùi ƒë·∫∑t volume = 0 ƒë·ªÉ ki·ªÉm tra m√† kh√¥ng ph√°t √¢m thanh
        const originalVolume = testSound.volume;
        testSound.volume = 0;

        try {
          await testSound.play();
          testSound.pause();
          testSound.currentTime = 0;
          console.log("‚úÖ Autoplay policy: Allowed");
        } catch {
          console.warn("‚ö†Ô∏è Autoplay policy: Blocked");
          this.showAutoplayAlert();
        } finally {
          testSound.volume = originalVolume;
        }
      }
    } catch (error) {
      console.warn("‚ö†Ô∏è Error checking autoplay policy:", error);
    }
  }

  /**
   * Hi·ªÉn th·ªã popup y√™u c·∫ßu user cho ph√©p √¢m thanh
   */
  showAutoplayAlert() {
    // Ch·ªâ hi·ªÉn th·ªã popup m·ªôt l·∫ßn
    if (this.autoplayAlertShown) return;
    this.autoplayAlertShown = true;

    // L∆∞u v√†o storage ƒë·ªÉ kh√¥ng hi·ªÉn th·ªã l·∫°i
    window["AppStorage"]?.saveSettings({ gameAudioAlertShown: true });

    // S·ª≠ d·ª•ng popup system thay v√¨ alert
    if (window["PopupManager"]) {
      console.log("üéµ Showing access audio popup");
      window["PopupManager"].showAccessAudioPopup();
    } else {
      // Fallback v·ªÅ alert n·∫øu popup system ch∆∞a s·∫µn s√†ng
      console.warn("‚ö†Ô∏è PopupManager not available, falling back to alert");
      const alertMessage = `
üéµ ƒê·ªÉ c√≥ tr·∫£i nghi·ªám √¢m thanh t·ªët nh·∫•t, vui l√≤ng:

1. Click v√†o b·∫•t k·ª≥ ƒë√¢u tr√™n trang ƒë·ªÉ cho ph√©p √¢m thanh
2. Ho·∫∑c click v√†o n√∫t "Play" ƒë·ªÉ test √¢m thanh
3. N·∫øu v·∫´n kh√¥ng c√≥ √¢m thanh, h√£y ki·ªÉm tra:
   - Browser settings (cho ph√©p autoplay)
   - Volume c·ªßa thi·∫øt b·ªã
   - Kh√¥ng c√≥ extension n√†o ch·∫∑n √¢m thanh

Click OK ƒë·ªÉ ti·∫øp t·ª•c.
      `;
      alert(alertMessage);
    }
  }

  /**
   * T·ª± ƒë·ªông thay ƒë·ªïi BGM d·ª±a tr√™n m√†n h√¨nh
   */
  autoChangeBGM(screenPath) {
    try {
      let bgmType = "bgm-home"; // default

      if (screenPath.includes("/intro/")) {
        bgmType = "bgm-intro";
      } else if (screenPath.includes("/home/")) {
        bgmType = "bgm-home";
      } else if (screenPath.includes("/select/")) {
        bgmType = "bgm-select";
      } else if (screenPath.includes("/game/")) {
        bgmType = "bgm-game";
      } else if (screenPath.includes("/settings/")) {
        bgmType = "bgm-settings";
      } else if (screenPath.includes("/result/")) {
        bgmType = "bgm-result";
      }

      // Ch·ªâ thay ƒë·ªïi BGM n·∫øu kh√°c v·ªõi BGM hi·ªán t·∫°i
      const currentBgm = this.getStatus().currentBgm;
      const newBgmPath = this.bgmMap[bgmType];

      if (currentBgm !== newBgmPath) {
        console.log(`üéµ Auto-changing BGM to: ${bgmType}`);
        this.playBgm(bgmType);
      }
    } catch (error) {
      console.warn("‚ö†Ô∏è Error auto-changing BGM:", error);
    }
  }

  /**
   * Ph√°t sound effect (h·ªó tr·ª£ overlapping)
   * @param {string} soundName - T√™n c·ªßa sound effect c·∫ßn ph√°t
   * @returns {void}
   * @throws {Error} N·∫øu sound kh√¥ng t·ªìn t·∫°i ho·∫∑c kh√¥ng th·ªÉ ph√°t
   * @example
   * audioManager.playSound("click");
   * audioManager.playSound("win");
   */
  playSound(soundName) {
    if (this.isMuted) return;

    const sound = this.sounds.get(soundName);
    if (!sound) {
      console.warn(`‚ö†Ô∏è Sound not found: ${soundName}`);
      return;
    }

    try {
      // Sao ch√©p audio ƒë·ªÉ c√≥ th·ªÉ ph√°t nhi·ªÅu l·∫ßn c√πng l√∫c
      const soundClone = sound.cloneNode();
      soundClone.volume = this.volume;

      soundClone.play().catch((error) => {
        console.warn(`‚ö†Ô∏è Failed to play sound ${soundName}:`, error);
      });

      // D·ªçn d·∫πp sau khi ph√°t xong
      soundClone.onended = () => {
        soundClone.remove();
      };
    } catch (error) {
      console.warn(`‚ö†Ô∏è Error playing sound ${soundName}:`, error);
    }
  }

  /**
   * Ph√°t BGM v·ªõi fade effect
   * @param {string} type - Lo·∫°i BGM c·∫ßn ph√°t (bgm-home, bgm-game, etc.)
   * @returns {Promise<void>}
   * @throws {Error} N·∫øu BGM kh√¥ng t·ªìn t·∫°i ho·∫∑c kh√¥ng th·ªÉ ph√°t
   * @example
   * await audioManager.playBgm("bgm-game");
   * await audioManager.playBgm("bgm-home");
   */
  async playBgm(type) {
    if (this.isMuted) return;

    const bgm = this.bgm.get(type);
    if (!bgm) {
      console.warn(`‚ö†Ô∏è BGM not found: ${type}`);
      return;
    }

    try {
      // L√†m m·ªù d·∫ßn BGM hi·ªán t·∫°i n·∫øu c√≥
      if (this.currentBgm && this.currentBgm !== bgm) {
        await this.fadeOutBGM(this.currentBgm);
        this.currentBgm.pause();
        this.currentBgm.currentTime = 0;
      }

      // L√†m r√µ d·∫ßn BGM m·ªõi
      this.currentBgm = bgm;
      bgm.volume = 0;
      bgm?.play?.();
      await this.fadeInBGM(bgm);

      console.log(`üé∂ Playing BGM: ${type}`);
    } catch (error) {
      console.warn(`‚ö†Ô∏è Error playing BGM ${type}:`, error);
    }
  }

  /**
   * Fade in BGM v·ªõi hi·ªáu ·ª©ng m∆∞·ª£t m√†
   * @param {HTMLAudioElement} audio - Audio element c·∫ßn fade in
   * @param {number} [duration=1000] - Th·ªùi gian fade in (ms)
   * @returns {Promise<void>}
   */
  async fadeInBGM(audio, duration = 1000) {
    const steps = 20;
    const stepDuration = duration / steps;
    const volumeStep = this.bgmVolume / steps;

    for (let i = 0; i < steps; i++) {
      audio.volume = volumeStep * (i + 1);
      await new Promise((resolve) => setTimeout(resolve, stepDuration));
    }
    audio.volume = this.bgmVolume;
  }

  /**
   * Fade out BGM v·ªõi hi·ªáu ·ª©ng m∆∞·ª£t m√†
   * @param {HTMLAudioElement} audio - Audio element c·∫ßn fade out
   * @param {number} [duration=500] - Th·ªùi gian fade out (ms)
   * @returns {Promise<void>}
   */
  async fadeOutBGM(audio, duration = 500) {
    const steps = 10;
    const stepDuration = duration / steps;
    const currentVolume = audio.volume;
    const volumeStep = currentVolume / steps;

    for (let i = 0; i < steps; i++) {
      audio.volume = currentVolume - volumeStep * i;
      await new Promise((resolve) => setTimeout(resolve, stepDuration));
    }
    audio.volume = 0;
  }

  /**
   * D·ª´ng BGM hi·ªán t·∫°i
   */
  stopBgm() {
    if (this.currentBgm) {
      this.currentBgm.pause();
      this.currentBgm.currentTime = 0;
      this.currentBgm = null;
    }
  }

  /**
   * T·∫Øt/b·∫≠t √¢m thanh
   */
  toggleMute(isMuted = !this.isMuted) {
    this.isMuted = isMuted;

    if (this.isMuted) {
      this.stopBgm();
    }

    console.log(`üîá Audio ${this.isMuted ? "muted" : "unmuted"}`);
    return this.isMuted;
  }

  /**
   * ƒêi·ªÅu ch·ªânh volume cho sound effects
   * @param {number} volume - Gi√° tr·ªã volume (0.0 - 1.0)
   * @returns {void}
   * @throws {Error} N·∫øu volume kh√¥ng h·ª£p l·ªá
   */
  setVolume(volume) {
    this.volume = Math.max(0, Math.min(1, volume));
    console.log(`üîä Sound volume set to: ${this.volume}`);
  }

  /**
   * ƒêi·ªÅu ch·ªânh volume cho BGM
   * @param {number} volume - Gi√° tr·ªã volume (0.0 - 1.0)
   * @returns {void}
   * @throws {Error} N·∫øu volume kh√¥ng h·ª£p l·ªá
   */
  setBgmVolume(volume) {
    this.bgmVolume = Math.max(0, Math.min(1, volume));

    if (this.currentBgm) {
      this.currentBgm.volume = this.bgmVolume;
    }

    console.log(`üé∂ BGM volume set to: ${this.bgmVolume}`);
  }

  /**
   * L·∫•y tr·∫°ng th√°i hi·ªán t·∫°i c·ªßa audio system
   * @returns {{
   *   isMuted: boolean,
   *   volume: number,
   *   bgmVolume: number,
   *   currentBgm: string|null,
   *   soundsLoaded: number,
   *   bgmLoaded: number
   * }} Tr·∫°ng th√°i audio system
   */
  getStatus() {
    return {
      isMuted: this.isMuted,
      volume: this.volume,
      bgmVolume: this.bgmVolume,
      currentBgm: this.currentBgm ? this.currentBgm.src : null,
      soundsLoaded: this.sounds.size,
      bgmLoaded: this.bgm.size,
    };
  }

  /**
   * Cleanup resources
   */
  destroy() {
    this.stopBgm();
    this.sounds.clear();
    this.bgm.clear();

    if (this.audioContext) {
      this.audioContext.close();
    }

    console.log("üóëÔ∏è Audio manager destroyed");
  }
}

// T·∫°o instance to√†n c·ª•c
const audioManager = new AudioManager();

// Xu·∫•t c√°c h√†m ƒë·ªÉ main.js s·ª≠ d·ª•ng
window["audioManager"] = audioManager;
window["initAudio"] = () => audioManager.initAudio();
window["playSound"] = (soundName) => audioManager.playSound(soundName);
window["playBgm"] = (type) => audioManager.playBgm(type);

// Xu·∫•t cho vi·ªác ki·ªÉm th·ª≠
if (typeof module !== "undefined" && module.exports) {
  module.exports = { AudioManager, audioManager };
}
