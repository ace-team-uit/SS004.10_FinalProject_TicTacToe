/**
 * Audio Manager Module
 * Qu·∫£n l√Ω √¢m thanh v√† BGM cho game Tic Tac Toe
 *
 * @author ACE Team
 * @version 1.0.0
 */

class AudioManager {
    constructor() {
    this.audioContext = null;
    this.sounds = new Map();
    this.bgm = new Map();
    this.currentBgm = null;
    this.isMuted = false;
    this.volume = 1.0;
    this.bgmVolume = 0.7;
    this.autoplayAlertShown = false;
    
    // Sound mapping
    this.soundMap = {
      click: "assets/sounds/common/click.mp3",
      win: "assets/sounds/common/win.mp3",
      lose: "assets/sounds/common/lose.mp3",
      draw: "assets/sounds/common/draw.mp3",
    };
    
    // BGM mapping
    this.bgmMap = {
      "bgm-home": "assets/sounds/bgm/Elevator.mp3",
      "bgm-game": "assets/sounds/bgm/Run-Amok.mp3",
      "bgm-select": "assets/sounds/bgm/Fluffing-a-Duck.mp3",
      "bgm-intro": "assets/sounds/bgm/Elevator.mp3",
      "bgm-settings": "assets/sounds/bgm/Elevator.mp3",
      "bgm-result": "assets/sounds/bgm/Elevator.mp3",
    };
  }

  /**
   * Kh·ªüi t·∫°o audio context v√† preload c√°c sound assets
   */
  async initAudio() {
    try {
      // T·∫°o audio context n·∫øu browser h·ªó tr·ª£
      if (typeof AudioContext !== "undefined" || typeof window['webkitAudioContext'] !== "undefined") {
        this.audioContext = new (AudioContext || window['webkitAudioContext'])();
      }

      // Preload t·∫•t c·∫£ sounds
      await this.preloadSounds();

            // Preload t·∫•t c·∫£ BGM
      await this.preloadBGM();
      
      // Ki·ªÉm tra autoplay policy v√† hi·ªÉn th·ªã alert n·∫øu c·∫ßn
      await this.checkAutoplayPolicy();
      
      console.log("üéµ Audio system initialized successfully");
      return true;
    } catch (error) {
      console.warn("‚ö†Ô∏è Audio initialization failed:", error);
      return false;
    }
  }

  /**
   * Preload t·∫•t c·∫£ sound effects
   */
  async preloadSounds() {
    const promises = Object.entries(this.soundMap).map(([name, path]) =>
      this.loadSound(name, path)
    );

    try {
      await Promise.all(promises);
      console.log("üîä All sound effects preloaded");
    } catch (error) {
      console.warn("‚ö†Ô∏è Some sound effects failed to load:", error);
    }
  }

  /**
   * Preload t·∫•t c·∫£ BGM
   */
  async preloadBGM() {
    const promises = Object.entries(this.bgmMap).map(([name, path]) => this.loadBGM(name, path));

    try {
      await Promise.all(promises);
      console.log("üé∂ All BGM preloaded");
    } catch (error) {
      console.warn("‚ö†Ô∏è Some BGM failed to load:", error);
    }
  }

  /**
   * Load m·ªôt sound effect
   */
  async loadSound(name, path) {
    try {
      const audio = new Audio();
      audio.preload = "auto";

      // X·ª≠ l√Ω l·ªói 404
      audio.onerror = () => {
        console.warn(`‚ö†Ô∏è Failed to load sound: ${path}`);
        this.sounds.set(name, null);
      };

      audio.src = path;
      await audio.load();

      this.sounds.set(name, audio);
      return audio;
    } catch (error) {
      console.warn(`‚ö†Ô∏è Error loading sound ${name}:`, error);
      this.sounds.set(name, null);
      return null;
    }
  }

  /**
   * Load m·ªôt BGM
   */
  async loadBGM(name, path) {
    try {
      const audio = new Audio();
      audio.preload = "auto";
      audio.loop = true;

      // X·ª≠ l√Ω l·ªói 404
      audio.onerror = () => {
        console.warn(`‚ö†Ô∏è Failed to load BGM: ${path}`);
        this.bgm.set(name, null);
      };

      audio.src = path;
      await audio.load();

      this.bgm.set(name, audio);
      return audio;
    } catch (error) {
      console.warn(`‚ö†Ô∏è Error loading BGM ${name}:`, error);
      this.bgm.set(name, null);
      return null;
    }
  }

  /**
   * Ki·ªÉm tra autoplay policy v√† hi·ªÉn th·ªã alert n·∫øu c·∫ßn
   */
  async checkAutoplayPolicy() {
    try {
      // Test autoplay v·ªõi m·ªôt sound ng·∫Øn
      const testSound = this.sounds.get('click');
      if (testSound) {
        // T·∫°m th·ªùi set volume = 0 ƒë·ªÉ test m√† kh√¥ng ph√°t √¢m thanh
        const originalVolume = testSound.volume;
        testSound.volume = 0;
        
        try {
          await testSound.play();
          testSound.pause();
          testSound.currentTime = 0;
          console.log("‚úÖ Autoplay policy: Allowed");
        } catch {
          console.warn("‚ö†Ô∏è Autoplay policy: Blocked");
          this.showAutoplayAlert();
        } finally {
          testSound.volume = originalVolume;
        }
      }
    } catch (error) {
      console.warn("‚ö†Ô∏è Error checking autoplay policy:", error);
    }
  }

  /**
   * Hi·ªÉn th·ªã alert y√™u c·∫ßu user cho ph√©p √¢m thanh
   */
  showAutoplayAlert() {
    // Ch·ªâ hi·ªÉn th·ªã alert m·ªôt l·∫ßn
    if (this.autoplayAlertShown) return;
    this.autoplayAlertShown = true;

    const alertMessage = `
üéµ ƒê·ªÉ c√≥ tr·∫£i nghi·ªám √¢m thanh t·ªët nh·∫•t, vui l√≤ng:

1. Click v√†o b·∫•t k·ª≥ ƒë√¢u tr√™n trang ƒë·ªÉ cho ph√©p √¢m thanh
2. Ho·∫∑c click v√†o n√∫t "Play" ƒë·ªÉ test √¢m thanh
3. N·∫øu v·∫´n kh√¥ng c√≥ √¢m thanh, h√£y ki·ªÉm tra:
   - Browser settings (cho ph√©p autoplay)
   - Volume c·ªßa thi·∫øt b·ªã
   - Kh√¥ng c√≥ extension n√†o ch·∫∑n √¢m thanh

Click OK ƒë·ªÉ ti·∫øp t·ª•c.
    `;

    alert(alertMessage);
  }

  /**
   * T·ª± ƒë·ªông thay ƒë·ªïi BGM d·ª±a tr√™n m√†n h√¨nh
   */
  autoChangeBGM(screenPath) {
    try {
      let bgmType = 'bgm-home'; // default

      if (screenPath.includes('/intro/')) {
        bgmType = 'bgm-intro';
      } else if (screenPath.includes('/home/')) {
        bgmType = 'bgm-home';
      } else if (screenPath.includes('/select/')) {
        bgmType = 'bgm-select';
      } else if (screenPath.includes('/game/')) {
        bgmType = 'bgm-game';
      } else if (screenPath.includes('/settings/')) {
        bgmType = 'bgm-settings';
      } else if (screenPath.includes('/result/')) {
        bgmType = 'bgm-result';
      }

      // Ch·ªâ thay ƒë·ªïi BGM n·∫øu kh√°c v·ªõi BGM hi·ªán t·∫°i
      const currentBgm = this.getStatus().currentBgm;
      const newBgmPath = this.bgmMap[bgmType];
      
      if (currentBgm !== newBgmPath) {
        console.log(`üéµ Auto-changing BGM to: ${bgmType}`);
        this.playBgm(bgmType);
      }
    } catch (error) {
      console.warn("‚ö†Ô∏è Error auto-changing BGM:", error);
    }
  }

  /**
   * Ph√°t sound effect (h·ªó tr·ª£ overlapping)
   */
  playSound(soundName) {
    if (this.isMuted) return;

    const sound = this.sounds.get(soundName);
    if (!sound) {
      console.warn(`‚ö†Ô∏è Sound not found: ${soundName}`);
      return;
    }

    try {
      // Clone audio ƒë·ªÉ c√≥ th·ªÉ ph√°t nhi·ªÅu l·∫ßn c√πng l√∫c
      const soundClone = sound.cloneNode();
      soundClone.volume = this.volume;

      soundClone.play().catch((error) => {
        console.warn(`‚ö†Ô∏è Failed to play sound ${soundName}:`, error);
      });

      // Cleanup sau khi ph√°t xong
      soundClone.onended = () => {
        soundClone.remove();
      };
    } catch (error) {
      console.warn(`‚ö†Ô∏è Error playing sound ${soundName}:`, error);
    }
  }

  /**
   * Ph√°t BGM v·ªõi fade effect
   */
  async playBgm(type) {
    if (this.isMuted) return;

    const bgm = this.bgm.get(type);
    if (!bgm) {
      console.warn(`‚ö†Ô∏è BGM not found: ${type}`);
      return;
    }

    try {
      // Fade out BGM hi·ªán t·∫°i n·∫øu c√≥
      if (this.currentBgm && this.currentBgm !== bgm) {
        await this.fadeOutBGM(this.currentBgm);
        this.currentBgm.pause();
        this.currentBgm.currentTime = 0;
      }

      // Fade in BGM m·ªõi
      this.currentBgm = bgm;
      bgm.volume = 0;
      bgm.play();
      await this.fadeInBGM(bgm);

      console.log(`üé∂ Playing BGM: ${type}`);
    } catch (error) {
      console.warn(`‚ö†Ô∏è Error playing BGM ${type}:`, error);
    }
  }

  /**
   * Fade in BGM
   */
  async fadeInBGM(audio, duration = 1000) {
    const steps = 20;
    const stepDuration = duration / steps;
    const volumeStep = this.bgmVolume / steps;

    for (let i = 0; i < steps; i++) {
      audio.volume = volumeStep * (i + 1);
      await new Promise((resolve) => setTimeout(resolve, stepDuration));
    }
    audio.volume = this.bgmVolume;
  }

  /**
   * Fade out BGM
   */
  async fadeOutBGM(audio, duration = 500) {
    const steps = 10;
    const stepDuration = duration / steps;
    const currentVolume = audio.volume;
    const volumeStep = currentVolume / steps;

    for (let i = 0; i < steps; i++) {
      audio.volume = currentVolume - volumeStep * i;
      await new Promise((resolve) => setTimeout(resolve, stepDuration));
    }
    audio.volume = 0;
  }

  /**
   * D·ª´ng BGM hi·ªán t·∫°i
   */
  stopBgm() {
    if (this.currentBgm) {
      this.currentBgm.pause();
      this.currentBgm.currentTime = 0;
      this.currentBgm = null;
    }
  }

  /**
   * T·∫Øt/b·∫≠t √¢m thanh
   */
  toggleMute() {
    this.isMuted = !this.isMuted;

    if (this.isMuted) {
      this.stopBgm();
    }

    console.log(`üîá Audio ${this.isMuted ? "muted" : "unmuted"}`);
    return this.isMuted;
  }

  /**
   * ƒêi·ªÅu ch·ªânh volume
   */
  setVolume(volume) {
    this.volume = Math.max(0, Math.min(1, volume));
    console.log(`üîä Sound volume set to: ${this.volume}`);
  }

  /**
   * ƒêi·ªÅu ch·ªânh BGM volume
   */
  setBgmVolume(volume) {
    this.bgmVolume = Math.max(0, Math.min(1, volume));

    if (this.currentBgm) {
      this.currentBgm.volume = this.bgmVolume;
    }

    console.log(`üé∂ BGM volume set to: ${this.bgmVolume}`);
  }

  /**
   * L·∫•y tr·∫°ng th√°i audio
   */
  getStatus() {
    return {
      isMuted: this.isMuted,
      volume: this.volume,
      bgmVolume: this.bgmVolume,
      currentBgm: this.currentBgm ? this.currentBgm.src : null,
      soundsLoaded: this.sounds.size,
      bgmLoaded: this.bgm.size,
    };
  }

  /**
   * Cleanup resources
   */
  destroy() {
    this.stopBgm();
    this.sounds.clear();
    this.bgm.clear();

    if (this.audioContext) {
      this.audioContext.close();
    }

    console.log("üóëÔ∏è Audio manager destroyed");
  }
}

// T·∫°o instance global
const audioManager = new AudioManager();

// Export functions ƒë·ªÉ main.js s·ª≠ d·ª•ng
window['audioManager'] = audioManager;
window['initAudio'] = () => audioManager.initAudio();
window['playSound'] = (soundName) => audioManager.playSound(soundName);
window['playBgm'] = (type) => audioManager.playBgm(type);

// Export cho testing
if (typeof module !== "undefined" && module.exports) {
  module.exports = { AudioManager, audioManager };
}
